1. string 문자열
- char 배열을 이용
- ex) char hello[20]; //실제 내용보다 하나 이상 크게.문자열 19개 저장 가능.
- printf scanf 입력시
  %s format 사용
  printf("%s", hello);
  scanf("%s", hello);

  ** scanf의 파라메터
  원래는 변수 앞에 &를 붙여 변수의 주소를 주게 되어있으나 string을 scanf 할 때에는 & 없이 이름만 주게됨. 
  이는 사실 배열 선언할 때 배열의 이름이 배열의 시작 주소를 나타내기 때문.
  따라서 변수 이름을 배열 이름으로 쓸 때에는 앞에 & 붙이지 않음.
  반면, scanf("%s", &str[0]) 의 경우에는 & 필요함. str[0]의 타입은 char 타입이기 때문.

2. 초기화
- char buf[10] = "Hello";
  char mystring[] = "world";
  char buf2[10]; -> 초기화를 해주지 않은 것
  
  buf2 = buf -> 불가능
  buf = "Hello"; -> 불가능
  ***주의*** string은 assign이 안된다.(초기화는 가능)
  char buf[10] = "Hello"; 는 assign이 아니라 초기화임.
  값을 주는 것은 함수를 활용해야함.

3. string 함수
- #include <string.h> 선언 필요
  strlen(str) 주어진 스트링의 길이를 반환
  strcpy(dest,source) 스트링 복제. 개념상 assignment와 같음.
  strcat(dest,source) dest뒤에 source 붙임
  strcmp(s1,s2) 두 개의 스트링 비교하여 사전순으로 s1이 빠르면 음수, 같으면 0, 뒤면 양수를 돌려줌.

- 한줄 읽기: fgets
  #include <stdio.h>
  scanf는 공백이 나오면 끊음
  fgets(char *s, int size, stdin);
  ex)
  char name[20];
  fgets(name, 20, stdin);
  printf("%s\n", name);

- 여러가지 값을 가지고 스트링 만들기
  #include <stdio.h>
  ...
  char id[100];
  int num;
  sprintf(id, "student%d", num); 
  // student%d 으로 만들어낸 string 모양을 캐릭터 배열인 id에 저장함
  // 즉 int num=23이라고 했을때 printf("%s", id)를 하면 student23이 출력됨